import * as THREE from 'three'
import { createRoot } from 'react-dom/client'
import React, {Suspense, useEffect, useLayoutEffect, useRef, useState } from 'react'
import { Canvas, useFrame } from '@react-three/fiber'
import {PerspectiveCamera, Html, useGLTF, Environment, Stage, PresentationControls } from '@react-three/drei'
import { MeshReflectorMaterial } from '../lib/drei/MeshReflectorMaterial'

import { useLoader } from '@react-three/fiber'
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { Object3D } from 'three';

import OrbitControls from '../components/OrbitControls';
// import {OrbitControls} from '@react-three/drei'
import Log from '../components/Log';

import styles from './Office3D.module.css'

function Box(props: JSX.IntrinsicElements['mesh']) {
  const ref = useRef<THREE.Mesh>(null!)
  const [hovered, hover] = useState(false)
  const [clicked, click] = useState(false)
  useFrame((state, delta) => (ref.current.rotation.x += 0.01))
  return (
    <mesh
      {...props}
      ref={ref}
      scale={clicked ? 1.5 : 1}
      onClick={(event) => click(!clicked)}
      onPointerOver={(event) => hover(true)}
      onPointerOut={(event) => hover(false)}>
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
    </mesh>
  )
}

interface group {
  current: {
    rotation: {
      x: number;
      y: number;
    };
  };
}

// @ts-ignore
function Tv({ ready, ...props }) {
  /*
  Auto-generated by: https://github.com/pmndrs/gltfjsx
  author: SilkevdSmissen (https://sketchfab.com/SilkevdSmissen)
  license: CC-BY-NC-ND-4.0 (http://creativecommons.org/licenses/by-nc-nd/4.0/)
  source: https://sketchfab.com/3d-models/vintage-television-panasonic-tr-555-780fac0ec94e450eb5cb54348fc2933e
  title: Vintage Television - Panasonic TR-555
  */
  const group = useRef()
// @ts-ignore
  const { nodes } = useGLTF('/tv-transformed.glb')
  const [video] = useState(() => Object.assign(document.createElement('video'), { src: '/drei.mp4', crossOrigin: 'Anonymous', loop: true }))
  useEffect(() => void (ready && video.play()), [ready, video])
  return (
    // @ts-ignore
    <group ref={group} {...props} dispose={null}>
      <mesh castShadow receiveShadow geometry={nodes.body.geometry} material={nodes.body.material} />
      <mesh scale={[-1, 1, 1]} position={[-43.65, 161.61, 131.29]} geometry={nodes.screen.geometry}>
        <meshPhysicalMaterial clearcoat={1} clearcoatRoughness={0} toneMapped={false}>
          <videoTexture
            attach="map"
            args={[video]}
            flipY={false}
            repeat={[5, 9]}
            offset={[-0.1, 0]}
            wrapT={THREE.RepeatWrapping}
            wrapS={THREE.RepeatWrapping}
            encoding={THREE.sRGBEncoding}
          />
        </meshPhysicalMaterial>
      </mesh>
    </group>
  )
}

useGLTF.preload('/tv-transformed.glb')

// @ts-ignore
export default function Office3D({ ready }) {

  const [model, setModel] = useState<Object3D | null>(null);
  const [gltf, setGLTF] = useState<GLTF | null>(null);

  useEffect(() => {

    const loader = new GLTFLoader();
    loader.load(
      'https://app-asset-workspace.s3.ap-southeast-2.amazonaws.com/models/office_desk/office_desk_batched.gltf',
      async (gltf) => {
        const nodes = await gltf.parser.getDependencies('node');
        setModel(nodes[0]);
        setGLTF(gltf);
      });
  }, []);

  return (
    // Customise height of element
    // https://tailwindcss.com/docs/height
    // "h-96": 24rem; /* 384px */
    <div className={"h-96"}>
      {/*<Canvas camera={{ position: [20, 10, 4], fov: 40 }}>*/}
      {/*  <ambientLight/>*/}
      {/*  <pointLight position={[10, 10, 10]}/>*/}
      {/*  {model ? (*/}
      {/*      <primitive object={gltf?.scene} position={[0, 0, 0]} scale={[0.1, 0.1, 0.1]}>*/}
      {/*        <Log log='[log][Canvas]gltf:' />*/}
      {/*        <Log log={gltf} />*/}
      {/*        <Log log='[log][Canvas]model:' />*/}
      {/*        <Log log={model} />*/}
      {/*      </primitive>*/}
      {/*  ) : (*/}
      {/*    <Html>loading ...</Html>*/}
      {/*  )}*/}
      {/*  <OrbitControls />*/}
      {/*</Canvas>*/}
      <Canvas dpr={[1, 2]} shadows className={styles.bg}>
        <fog attach="fog" args={['#101010', 0, 10]} />
        <Environment preset="city" />
        <group position={[0, -0.5, 0]}>
          <Tv ready={ready} scale={0.007} position={[0, 100, 0]} />
            {model ? (
                <primitive object={gltf?.scene} position={[0, 0, 0]} scale={[0.01, 0.01, 0.01]}>
                  <Log log='[log][Canvas]gltf:' />
                  <Log log={gltf} />
                  <Log log='[log][Canvas]model:' />
                  <Log log={model} />
                </primitive>
            ) : (
              <Html>loading ...</Html>
            )}
          <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>
            <planeGeometry args={[1000, 1000]} />
            {/*@ts-ignore*/}
            <MeshReflectorMaterial
              blur={[400, 100]}
              resolution={1024}
              mixBlur={1}
              opacity={2}
              depthScale={1.1}
              minDepthThreshold={0.7}
              maxDepthThreshold={1.25}
              roughness={1}
            />
          </mesh>
          <mesh receiveShadow rotation-x={-Math.PI / 2} position={[0, 0.001, 0]} scale={100}>
            <planeGeometry args={[10, 10]} />
            <shadowMaterial transparent color="black" opacity={1} />
          </mesh>
        </group>
        <OrbitControls
          makeDefault
          autoRotate
          autoRotateSpeed={0.3}
          maxPolarAngle={Math.PI / 2.3}
          minPolarAngle={Math.PI / 2.3}
          enableZoom={false}
          enablePan={false}
        />
        <PerspectiveCamera makeDefault fov={45} position={[0, 0, 4]}>
          <spotLight position={[10, 10, 5]} angle={0.15} penumbra={1} intensity={1} castShadow shadow-mapSize={[2048, 2048]} />
        </PerspectiveCamera>
      </Canvas>
    </div>
  );
}
